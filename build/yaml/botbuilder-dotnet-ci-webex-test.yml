#
# Runs functional tests against the Webex channel.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: 'windows-2019'

trigger: # ci trigger
  batch: true
  branches:
    include:
     - master
  paths:
    include:
      - '*'
    exclude:
      - doc/
      - specs/
      - Changes.md
      - LICENSE
      - README.md
      - UsingMyGet.md

pr: none # no pr trigger

variables:
  ReleasePackageVersion: 4.8.0-preview-$(Build.BuildNumber)
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'debug'
  Parameters.solution: Microsoft.Bot.Builder.sln
  WebexPublicAddress: 'https://$(WebexTestBotBotName).azurewebsites.net/api/messages'
#  AzureSubscription: define this in Azure
#  DeleteResourceGroup: (optional) define this in Azure. Default = true.
#  WebexTestBotAppId: define this in Azure
#  WebexTestBotAppSecret: define this in Azure
#  WebexTestBotBotGroup: define this in Azure
#  WebexTestBotBotName: define this in Azure
#  WebexTestBotRefreshToken: define this in Azure
#  WebexTestBotWebexBotAccessToken: define this in Azure
#  WebexTestBotWebexBotUserName: define this in Azure
#  WebexTestBotWebexIntegrationClientId: define this in Azure
#  WebexTestBotWebexIntegrationClientSecret: define this in Azure
#  WebexTestBotWebexRoomId: define this in Azure
#  WebexTestBotWebexWebhookName: define this in Azure
#  WebexTestBotWebexWebhookSecret: define this in Azure

steps:
- template: ci-build-steps.yml

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Webex.TestBot\Microsoft.Bot.Builder.Adapters.Webex.TestBot.csproj'
    arguments: '--output $(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Webex.TestBot\PublishedBot'
    modifyOutputPath: false

- task: AzureCLI@1
  displayName: 'Create Azure Resources'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: inlineScript
    inlineScript: |
     call az deployment create --name "$(WebexTestBotBotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Webex.TestBot\DeploymentTemplates\template-with-new-rg.json" --location "westus" --parameters appId=$(WebexTestBotAppId) appSecret="$(WebexTestBotAppSecret)" botId="$(WebexTestBotBotName)" botSku=F0 newAppServicePlanName="$(WebexTestBotBotName)" newWebAppName="$(WebexTestBotBotName)" groupName="$(WebexTestBotBotGroup)" groupLocation="westus" newAppServicePlanLocation="westus" webexPublicAddress="$(WebexPublicAddress)" webexAccessToken="$(WebexTestBotWebexBotAccessToken)" webexSecret="$(WebexTestBotWebexWebhookSecret)" webexWebhookName="$(WebexTestBotWebexWebhookName)"
     call az webapp deployment source config-zip --resource-group "$(WebexTestBotBotGroup)" --name "$(WebexTestBotBotName)" --src "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Webex.TestBot\PublishedBot\PublishedBot.zip"

- task: AzureCLI@1
  displayName: 'Zip Deploy Bot'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: inlineScript
    inlineScript: 'call az webapp deployment source config-zip --resource-group "$(WebexTestBotBotGroup)" --name "$(WebexTestBotBotName)" --src "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Webex.TestBot\PublishedBot\PublishedBot.zip"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'FunctionalTests\Microsoft.Bot.Builder.FunctionalTests\Microsoft.Bot.Builder.FunctionalTests.csproj'
    arguments: '-v n --configuration $(BuildConfiguration) --no-build --no-restore --filter WebexClientTest'

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(WebexTestBotBotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
